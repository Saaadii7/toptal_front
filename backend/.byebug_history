c
user_params.merge({password: '123123123'})
user_params
req.from_json
req.to_json
req.to_hash
req.to_json
req.to_s
req.to_hash
User.create!(req)
req.instance_variables
req.instance_methods
req.attributes
req.attribs
req.methods
req
req.attributes=
req.attributes
req.merge_attributes({password: '123123123'})
req.merge({password: '123123123'})
req
c
valuec
value
key
c
eatable_group.first
eatable_group
c
DateTime.now - 7.days
DateTime.now - 7.daya
DateTime.now
@current_user.
c
@eatables.count
c@eatables.count
@grouped_eatables.count
c
User.last
all.count
c
@current_user
Eatable.where(eating_time: req.start..req.end).count
Eatable.where(eating_time: req.start..req.end)
req.start.in_time_zone('Asia/Karachi')
req.start.in_timezone('Asia/Karachi')
req.start
req.end
(req.end - req.start).to_f.days.in_hours
(req.end - req.start).to_f.days
((req.end - req.start).to_f*3600).seconds.in
((req.end - req.start).to_f*3600).seconds
((req.end - req.start).to_f*3600)
(req.end - req.start).to_f.in_hours
(req.end - req.start).to_f.seconds
(req.end - req.start).to_f.seconds.
(req.end - req.start).to_f.seconds.in_hours
(req.end - req.start).seconds.in_hours
(req.end - req.start).seconds
(req.end - req.start).to_f
req.end.mjd - req.start.mjd
req.end.mjd - req.start.enj
req.end.mjd
(req.start..req.end).count
(req.start...req.end).count
(req.end...req.start).count
req.end...req.start
req.end..req.start
(req.end - req.start) / 86400
distance_of_time_in_words
(req.end - req.start).to_f
(req.end - req.start).to_i
req.end - req.start
(req.end - req.start).to_s
req.end - req.start.to_s
req.end - req.start
req.start - req.end
req
c
req.end.to_datetime
c
req.end.to_datetime
req.end
req
c
self.end
c
ss.w
ss.asd
ss.end
ss.start
ss = ReportRequest.new(calorie_intake_params)
ReportRequest.new(calorie_intake_params)
reqReportRequest.new(calorie_intake_params)
req
c
from_time
c
pagy_metadata(@pagy)
pagy_metadata
@pagy
c
Eatable.where(id: (Eatable.ids - @eatables.ids)).first.user.admin?
Eatable.where(id: (Eatable.ids - @eatables.ids)).first.user
Eatable.where(id: (Eatable.ids - @eatables.ids)).first
Eatable.where(id: (Eatable.ids - @eatables.ids))
Eatable.ids - @eatables.ids
@eatables.ids - Eatable.ids
@eatables.ids
Eatable.count
@eatables.count
c
cc
@eatables.count
c
exception.subject.to_s
exception.subject._to_s
exception.subject._to_S
exception.subject.class.to_s
exception.subject.class.name.pluralize
exception.subject.class.name
exception.subject.class_name
exception.subject.class
exception.subject
exception
c
@eatable
c
@eatable
c
user.id
c
can? :manage, Eatable, id: user.eatables.ids, user: user
can? :manage, Eatable
c
can? :manage, Eatable
user.admin?
user
c
@current_user.eatables.new(eatable_params)
@current_user.eatables
@current_user
eatable_params
c
params
c
current_user
@current_user
c
@current_user
current_user
c
request_http_token_authentication
c
request_http_token_authentication
c
request_http_token_authentication
authenticate_or_request_with_http_token
c
authenticate_or_request_with_http_token
authenticate_or_request_with_token
authenticate_or_request_with_http_token
c
request.headers['Authorization']
c
current_user
c
@current_user ||= super || User.find(@current_user_id)
@current_user_id
current_user@current_user_id
c
current_user
c
current_user
c
render user
user
c
@current_user
c
sign_in_params[:email]
sign_in_params
c
sign_in_params
params
c
params
sign_in_params
sign_in_params[:email]
